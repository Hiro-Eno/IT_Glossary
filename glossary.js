// glossaryファイル IT
`use strict`
const glossary = [
{target:`★IT業界の動向がわかるトレンド用語`, content:`ーーーーー`},
{target:`ゼロトラスト`, content:`どの通信も信頼できない、という前提で検査する。`},
{target:`エッジコンピューティング`, content:`端末側で処理してサーバーの負荷や遅延を減らす。`},
{target:`量子コンピューティング`, content:`難問を解くことを期待されているコンピュータ。`},
{target:`DX`, content:`データやデジタル技術で企業のビジネスモデルを変革する。`},
{target:`5G`, content:`携帯電話での第5世代の無線通信技術。`},
{target:`シンギュラリティ`, content:`人工知能の能力が人間を超えるという仮説。`},
{target:`RPA（Robotic Process Automation）`, content:`事務処理などの業務を自動化する。`},
{target:`LPWA（Low Power Wide Area）`, content:`低消費電力で長距離の通信を実現した無線通信技術。`},
{target:`LTE-M（Long Term Evolution for Machine-type-communication）`, content:`LTEの空いた領域を使用するIoT通信規格。`},
{target:`NGN（Next Generation Network）`, content:`次世代のネットワーク基盤。`},
{target:`IPoE（IP over Ethernet）`, content:`LANと同じ方法でインターネットに接続する接続方式。`},
{target:`MaaS（Mobility as a Service）`, content:`ITを活用してあらゆる交通機関を統合して利用。`},
{target:`HCI（Hyper-Converged Infrastructure）`, content:`1台でシンプルなサーバー構成を実現できるインフラ製品。`},
{target:`マイクロサービス`, content:`複数の小さなサービスに分類してアプリケーションを構成。`},
{target:`ブロックチェーン`, content:`分散型ネットワークと暗号技術を使ったデータ管理手法。`},
{target:`xR（VR：Virtual Reality、AR：Augmented Reality、MR：Mixed Reality）`, content:`現実世界と仮想世界の融合。`},
{target:`LiDAR（Light Detection And Ranging）`, content:`反射を利用した距離の測定。`},
{target:`オムニチャネル`, content:`ネットとリアルを融合したマーケティング手法。`},
{target:`オンプレミス`, content:`サーバーを自社で構築・運用。`},
{target:`VUI（Voice User Interface）`, content:`スマートスピーカーで広がる音声認識のインターフェイス。`},
{target:`サブスクリプション`, content:`利用料を支払って期間内だけ利用する契約。`},
{target:`NFC（Near Field Communication）`, content:`非接触のICチップで実現した近距離の無線通信。`},
{target:`フィンテック`, content:`ITと金融の融合。`},
{target:`SDGs（Sustainable Development Goals）`, content:`世界が抱える諸問題に対するゴール。`},
{target:`デジタルツイン`, content:`サイバー空間上に物理空間を再現する。`},
{target:`eSIM（embedded Subscriber Identity Module）`, content:`交換せずにキャリアや通信プランを変更できるSIM。`},
{target:`GIGAスクール構想（Global and Innovation Gateway for All）`, content:`学校におけるICTの活用。`},
{target:`データサイエンティスト`, content:`ビックデータやAIを活用してデータから知見を得る人。`},
{target:`レコメンデーション`, content:`顧客に合わせた商品やサービスをおすすめ。`},
{target:`ダイナミックプライシング`, content:`需要と共有に合わせて値段を変動させる。`},
{target:`ノーコードとローコード`, content:`最小限のコーディングでソフトウェアを開発。`},
{target:`OTG（USB On-The-Go）`, content:`スマホとUSB機器を直接接続できる規格。`},
{target:`STEM教育とSTEAM教育（Science, Technology, Engineering (,Art) and Mathematics）`, content:`理数教育に創造性教育を加えた教育概念。`},
{target:`ドッグフーディング`, content:`社内で自社の製品を使ってテストする。`},
{target:`★エンジニア1年目から知っておきたい基本用語`, content:`ーーーーー`},
{target:`GDPR（General Data Protection Regulation）`, content:`EUにおける個人情報保護の枠組み。`},
{target:`CCPA（Califolnia Consumer Privacy Act）`, content:`カリフォルニア州における個人情報保護の枠組み。`},
{target:`CxO（CTO,CIO,CISO,…）（Chief xxx Officer）`, content:`企業における様々な責任者の総称と呼称。`},
{target:`VPoE（Vice President of Engineering）`, content:`エンジニアを率いるマネジメント責任者。`},
{target:`テックリード`, content:`技術面でチームを引っ張り、他チームと連携する。`},
{target:`EM（Engineering Manager）`, content:`エンジニアの技術力や働き方を最大化する。`},
{target:`フルスタック`, content:`1人で幅広い領域の技術を網羅。`},
{target:`1 on 1`, content:`部下の成長をサポートする定期的なミーティング。`},
{target:`OKR（Objectives and Key Results）`, content:`会社の目標と個人の目標を連携させるフレームワーク。`},
{target:`MBO（Management by Objectives）`, content:`目標管理の方法。上司と部下で目標設定し、半年や1年間での達成度を評価。`},
{target:`SMART（Specific, Measurable, Achievable, Relevant, Time-based）`, content:`目標設定の5要素。具体的、測定可能、達成可能、経営目標に関連し、時間制約がある指標のこと。`},
{target:`情報銀行`, content:`行動履歴や購買履歴を一元管理。`},
{target:`オプトイン`, content:`本人の同意を事前に得ること。`},
{target:`オプトアウト`, content:`本人の同意を事前に得ないこと。`},
{target:`Society 5.0`, content:`IoTで新たな価値を産みだし、課題や困難を克服。`},
{target:`コネクティッドシティ`, content:`最先端技術で作る未来都市。`},
{target:`スマートグリッド`, content:`ITを使いエネルギーの需要を測定し、必要なところに効率よく送電する仕組み。`},
{target:`スマートメータ―`, content:`電力やガス、水道の使用量を測定する機能に加え、通信機能により電力会社などに検針結果やリアルタイムの使用量などを送信できる。`},
{target:`スマートホーム`, content:`AiやIoTの技術を使って設備を便利に利用できる住宅のこと。`},
{target:`ギグエコノミー`, content:`インターネット経由で一時的な仕事を受ける新しい働き方。`},
{target:`クラウドソーシング`, content:`ネットなどで個人や企業をマッチングし仕事の発注や受注を行う仕組み。`},
{target:`シェアリングエコノミー`, content:`ネットを通して個人をマッチングし、モノや場所、スキル、お金、時間などを必要な時に必要なだけ個人間で共有する社会やサービスのこと。`},
{target:`インダストリー4.0`, content:`製造業における新たな産業革命。AiやIoTによる高度な自働化のこと。スマートファクトリーとも呼ばれ、より効率よく製造できる。`},
{target:`セル生産`, content:`1つの製品を少人数で組み立てる方式で、仕様変更にも柔軟に対応でき、少量多品種の生産が可能。`},
{target:`ダイナミックセル生産`, content:`リアルタイムに変化する情報をネット経由でロボットが取得し、その情報に応じて生産する方式で、ライン生産とセル生産の良いところを組合せている。`},
{target:`PoC（Proof of Concept）`, content:`新しいアイデアを試して投資判断に役立てる。概念実証。新しい技術やアイデアなどを実際に試してみることを指す。製品やシステムの簡易版を作ってみて、その実現可能性や社会での需要などを位定めるために実施される。`},
{target:`パイロットプロジェクト`, content:`一部の部署、利用者だけを対象として試験的に実施されるプロジェクトのこと。`},
{target:`PoT（Proof of Technology）`, content:`技術実証。技術的な課題の有無を検証するために実施される。ビジネス的より、技術的な視点であり、実現可否を調べること。`},
{target:`R＆D（Research and Development）`, content:`研究開発。`},
{target:`PLM（Product Lifecycle Management）`, content:`製品の企画から廃棄までを管理する手法。`},
{target:`BPMとBPMS（Business Process Management (Suite/System)）`, content:`企業の業務改善を可視化。仕事を進める上での手順や役割分担、ルールなどを関係者の間で共有し、その業務の流れにおける問題点などの分析や最適化を継続的に繰り返して改善すること。ITツールを使ってリアルタイムで可視化し、対策を実施するツールや、単純にツールを導入するだけでなく、戦略的に業務を改善・改革する活動をさす。`},
{target:`BRMS（Business Rule Management System）`, content:`実務におけるルールを管理してシステム開発を効率化。組織などにおけるビジネスのルールをルールエンジンと呼ばれる場所に登録して管理する手法。`},
{target:`ナレッジマネジメント`, content:`従業員の持つ知識を組織の内部で蓄積、共有し、組織として活用する試みのこと。専用のシステムが導入されることもある。`},
{target:`DMN（Decition Model and Notation）`, content:`BPMNの中で意思決定に関する部分を表現するための表記法。意思決定に必要な情報、知識、根拠などを図で書くことで共通認識を持つために使われる。`},
{target:`ERP（Enterprise Resources Planning）`, content:`企業の基幹システムで全体を最適化。組織運営に必要なヒト・モノ・カネ・情報の資源を有効に活用するため、組織が持つ情報を一元管理して経営戦略や戦術を決定するための考え方のこと。`},
{target:`SCM（Supply Cahin Management）`, content:`受注から納品までを一元管理。`},
{target:`CRM（Customer Relationship Management）`, content:`顧客情報を管理して顧客に合った商品やサービスを提供。顧客とのやり取りを記録・分析し、業務に活かす手法や、そのためのツールのこと。`},
{target:`インサイドセールス`, content:`営業担当者が、電話やメールなどを使って顧客とコミュニケーションをとる営業方法。`},
{target:`リードジェネレーション`, content:`見込み顧客獲得のこと。展示会での名刺交換やセミナーの開催、Webサイトの問合せフォームからの資料請求など。`},
{target:`リードナーチャリング`, content:`見込み顧客に対して情報の提供や問い合わせ対応を通して自社の顧客になってもらうこと。`},
{target:`SFA（Sales Force Automation）`, content:`企業の営業活動に関するデータを一元管理。営業の自働化と訳され、営業担当者の日々の活動を入力することで、組織として顧客情報や進捗状況、売上の集計などが可能なシステムのことを指し、営業支援システムとも呼ばれる。`},
{target:`チャットボット`, content:`人工知能を使って顧客の問い合わせ対応を自働化。`},
{target:`DSPとSSP（Demand Side Platform, Supply Side Platform）`, content:`Webにおける広告配信を最適化。Webサイトに表示される広告について、広告を表示する側と配信する側のそれぞれの利益を最大化する仕組みやツールのこと。前者は、広告主や広告代理店といった広告配信側のプラットフォームでより安く表示できる配信先を探す。後者は、広告を表示するWebサイトなど媒体側のプラットフォームでより高額な広告を探して入札する。`},
{target:`RTB（Real Time Bidding）`, content:`リアルタイム入札。Webｻｲﾄの広告を表示する時、リアルタイムにオークション形式でマッチングし、最も高い金額を付けた広告を表示する方式。`},
{target:`アドネットワーク`, content:`複数のWebサイトを取りまとめた広告ネットワーク。DSPは複数のアドネットワークに配信できる。`},
{target:`アドエクスチェンジ`, content:`アドナっとワークが持つ広告枠を交換し、自由に売買する仕組み。`},
{target:`RFID（Radio Frequency IDentification）`, content:`ID情報を埋め込んだタグで商品などを管理。NFCと比べて通信距離が長い特徴がある。`},
{target:`パッシブタグ`, content:`電池などの電源が内蔵されておらず、読み書きする機器からの電力を使用して電波を発信するタグ。通信距離は短いが、安価で半永久的に使用できる。`},
{target:`アクティブタグ`, content:`電池を内蔵しているため自ら電波を発信でき、長距離（数十から数百m）でも通信できるタグ。人や物の位置をリアルタイムに把握するために使われる。`},
{target:`NFC（Near Field Communication）`, content:`RFIDに近いもの。1枚100円程度で購入できる。スマホでも読み書きが可能で、読み取った時に様々な処理を実行できる。`},
{target:`アプライアンス`, content:`特定の機能に特化した機器。`},
{target:`DMP（Data Management Platform）`, content:`情報を蓄積し、顧客に合わせて広告を配信する。過去に自社のサイトで商品を購入した顧客に対して広告を配信するなど、顧客に合わせたマーケティングを実現するために使われる。DSPやSSPのマッチングの精度を高めるためにもつかわれる。`},
{target:`アドテク`, content:`広告の配信をシステム化し、効率よく調整すること。`},
{target:`KPIとKGI（Key Performance Indicator, Key Goal Indicator）`, content:`企業や部署における目標達成の指標。前者は、重要業績評価指標でページビューやコンバージョン率などの数値目標を指す。後者は、重要目標達成指標で売上高や利益率などの目標を指す。`},
{target:`コンバージョン率`, content:`Webサイトのアクセス数のうち、利用者に取ってもらいたい行動が実施された割合。`},
{target:`チャーンレート`, content:`サブスクリプションの解約率。`},
{target:`ネガティブチャーン`, content:`解約による収益の減少よりも、高額な契約などに変更した利用者などの収益がうわまわったこと。単価を上げた場合などに発生し、経営状況としては悪くない。`},
{target:`カスタマーサクセス`, content:`自社製品を使った顧客の成功のこと。継続して成功してもらえるよう積極的に支援する。`},
{target:`LTV（Life Time Value）`, content:`顧客生涯価値。顧客がその企業にもたらす価値の合計を意味する。`},
{target:`MRRとARR（Monthly Recirromg Revenue, Annual Recurring Revenue）`, content:`サブスクリプション型のビジネスの成長を調べる指標。前者は、月次経常収益でサブスクリプション型のサービスなどで毎月同じように発生する収益や売り上げのこと。単発で発生する売り上げなどは含まない。後者は、年次経常収益で前者を12倍した値だが年間契約が多いビジネスでよく使われる。`},
{target:`ARPU（Average Revenue Per User）`, content:`ユーザー平均単価。MRRを利用者の数で割った値。`},
{target:`ARPPU（Average Revenue Per Paid User）`, content:`課金ユーザー平均単価。MRRを課金している利用者の数で割った値。`},
{target:`CAC（Customer Acquisition Cost）`, content:`顧客獲得費用。顧客獲得に要した費用と獲得した顧客数で割った値。`},
{target:`アジリティ`, content:`社会の変化に追随できる機敏性。`},
{target:`EMS（Electronics Manufacturing Service）`, content:`製造業におけるアウトソーシング。電子機器の製造を請け負うメーカーのこと。生産だけでなく、設計や部品の調達、組み立て、配送まで、一気通貫で対応する。発注元は製品の企画や販売などに注力でき、工場や人件費などのコストを削減できる。`},
{target:`OEM（Original Equipment Manufacturing）`, content:`製造メーカーが自社のブランドではなく他社のブランドで製品を作ること。コスト削減や生産効率向上のために、発注元が自社で生産しないことを意味する。`},
{target:`ODM（Original Design Manufacturing）`, content:`製品の設計から製品開発までを受託者が行うこと。発注側の技術力が低い場合などに、設計も含め依頼することで、ノウハウや技術力が無くても参入できる。`},
{target:`BPO（Business Process Outsourcing）`, content:`企業の内部管理部門である総務や人事、給与計算などの業務をアウトソーシングすること。企業が本来の業務に集中するために使われることが多い。`},
{target:`Markdown`, content:`手軽に文書の構造を指定できる記法。見出しや強調、箇条書きなど文書の構造を表現する時に、簡単な指定で手軽に記述できる記法のこと。`},
{target:`ミドルウェア`, content:`OSとアプリの橋渡しをするソフトウェア。OSとアプリケーションソフトの間で、高度なサービスや機能を提供するソフトウェア。Webサーバーやデータベースサーバーなどが該当し、単独では利用されない。データベースを個々のアプリケーションソフトで実装するのは大変だが、アプリケーションが利用することで簡単にデータベースの機能を実現できる。`},
{target:`DBMS（Database Management System）`, content:`データベース管理システム。`},
{target:`Webサーバー`, content:`WebブラウザなどとHTTPと呼ばれるプロトコルでやり取りし、HTMLファイルや画像ファイルなどを提供するコンピュータやソフトウェアのこと。`},
{target:`アプリケーションサーバー`, content:`Webアプリで動的に処理を変える場合など、Webサーバー上でアプリケーションを実行するためのソフトウェアのこと。実行した結果をWebサーバーに返す。`},
{target:`デバイスドライバ`, content:`ハードウェアを操作するソフトウェア。`},
{target:`ベンチマーク`, content:`ハードウェアやソフトウェアの性能を評価する基準。`},
{target:`アドベントカレンダー`, content:`12月にエンジニアが投稿するブログのバトン。ITエンジニアが毎日交代でブログなどに記事を投稿する規格を指すことも多い。`},
{target:`形態素解析`, content:`意味のある最小限の単語などに分割して品詞を分析。自然言語の分を意味ある最小限の単語に分割し、その品詞などを分析すること。日本語の場合、単語と単語をコンピュータが判断して区切ることは難しいが、様々な辞書やツールが開発されている。`},
{target:`ワードクラウド`, content:`単語の出現頻度などをもとに、よく登場する単語は大きく表示することで、文章における単語の特徴を調べる方法。見た目がカラフルになり、見ているだけでも楽しい。`},
{target:`ワードサラダ`, content:`適当に単語を並べてできる文章のことで、文法は正しいが意味は通らない。迷惑メールの作成などランダムに単語を並べて文章を生成する方法が使われる。`},
{target:`MeCab`, content:`日本語の形態素解析によく使われるツール。単体でも実行できるが、プログラミング言語から使用できるだけでなく、辞書を自由に変えて形態素解析できる。`},
{target:`正規化`, content:`データの規則性に注目して整理。データを利用しやすいように成形すること。関係エータベースの場合、データの冗長性を排除し、データの不整合が起きにくくするために実施され、「第1正規化」、「第2正規化」、「第3正規化」「ボイスコッド正規化」ばどがある。正規化されたデータベースで、データを更新する時は1箇所だけど更新すればよくなり、多くの場合、全体のデータ量が減る。`},
{target:`正規表現`, content:`複数の文字列を1つのパターンで識別する表現。複数の文字列を1つの文字列で識別する表現方法で、指定した条件に合致するかを調べるために使われる。`},
{target:`メタ文字`, content:`正規表現の中で特別な意味を持った文字。ドットは任意の1文字と、縦棒は複数の中のいずれかとマッチすることを意味する。`},
{target:`トラフィック`, content:`一定期間内にネットワーク上を通過するデータ量。`},
{target:`スループット`, content:`単位時間あたりに処理できる量のことで、ネットワークの場合は単位時間あたりに実施に通信したデータ量のこと。`},
{target:`帯域（帯域幅）`, content:`道路の広さに例えられるように、単位時間あたりに送れる情報量のこと。周波数の範囲を意味することも多い。`},
{target:`転送量`, content:`サーバーなどが送り出したファイルの量に対して使われることが多い。`},
{target:`トリガー`, content:`コンピュータが動作を開始するきっかけ。データベースの場合はデータの登録や削除などが該当し、この時に何らかの処理を実行するように設定できる。`},
{target:`イベント`, content:`プログラムの内部で発生した出来事のこと。ボタンを押された、キーボードから何か入力された、などのイベントが発生するとプログラムが何らかの応答を行う。`},
{target:`割り込み`, content:`周辺機器などから受け取る要求のこと。プログラムで実行中の処理があった場合も、優先順位が高い割り込みがあれば、その処理を受け付けて処理する必要がある。`},
{target:`コールバック`, content:`ある処理を実行する時その処理の途中で別の処理を実行するように指定する手法。用意されている処理の中で、任意の処理を実行できるようになる。`},
{target:`★システム開発や実行環境の構築で使われるIT用語`, content:`ーーーーー`},
{target:`Docker`, content:`コンテナ型の仮想化プラットフォーム。仮想化したハードウェアの中でOSやアプリケーションを実行するのではなく、Linuxカーネルが持つ「コンテナ」という機能を使ってアプリケーションを仮想的な環境で実行させるプラットフォーム。他のプロセスやコンテナから分離されており使いたいアプリケーションとは無関係な処理が動いていないため、無駄が少ない。`},
{target:`Docker Hub`, content:`Dockerコンテナを共有するために公開された場所（レジストリ）で、多くのコンテナをダウンロードできるだけでなく、アップロードして公開できる。`},
{target:`Dockerfile`, content:`Dockerのコンテナを生成するための設定ファイルで、テキストファイルなのでテキストエディタなどで編集できる。この内容に沿ってコンテナが作られる。`},
{target:`Docker Compose`, content:`複数のコンテナで構成されるアプリケーションを作るとき、関連するコンテナの起動や停止を個別に実行するのではなく、まとめて実行できるツール。`},
{target:`Kubernetes`, content:`コンテナ単位でアプリを自動的に管理する基盤。Dockerなどのコンテナ型の仮想化プラットフォームで、複数のコンテナの操作を自働化するソフトウェア。コンテナの稼働状況の管理や負荷分散、自動配置などの機能を備えており、稼働中のアプリの規模を容易に拡大できる。また、マイクロサービス化の推進によりアプリケーションの迅速な開発につながる。k8sと略されることも多い。`},
{target:`Pod`, content:`Kubrenetesでアプリケーションをデプロイする単位。複数のコンテナを1つにまとめて管理することで、サービスの起動や停止をまとめて実行できる。`},
{target:`ローリングアップデート`, content:`ソフトウェアのバージョンアップなどの更新時に、複数のコンピュータで稼働中のシステムを完全に停止することもなく、少しずつ新しいものに入れ替えること。`},
{target:`Minikube`, content:`ローカル環境で簡単にKubernetesの環境を実行するためのツール。仮想環境で動作し、アプリケーションの開発やテストの環境として使われる。`},
{target:`WSL（Windows Subsystem for Linux）`, content:`Windows上でLinuxをネイティブに実行する仮想環境。Windowsの中でプロセスの1つとしてLinuxを実行する仕組み。仮想マシンとしてLinuxを実行することと比べ、OSを起動する時間が無く不要なプロセスなどが動いていないため、高速に動作する。ほとんどのLinuxアプリケーションがそのまま動作するだけでなく、WindowsとLinux間で相互のファイルにアクセスできる。`},
{target:`Hyper-V`, content:`ハードウェアを仮想化し、Windows上の仮想マシンとして複数のOSを実行できる仕組み。`},
{target:`Cygwin`, content:`Windows上でUNIXに似た環境を提供するフリーソフトウェア。WSLが登場するまでは、UNIX用のソフトウェアをWindows上で実行するためによく使われた。`},
{target:`エミュレーター`, content:`特定の環境で動作するソフトウェアを、異なる環境で疑似的に動作させる手法。古い環境で使っていたソフトウェアを新しい環境で動かすために使われることが多い。`},
{target:`スケーラビリティ`, content:`負荷に応じてシステムを拡張。ハードウェアやソフトウェアなどを柔軟に拡張できること。`},
{target:`オートスケール`, content:`想定した負荷を超えた時に、自動的にサーバーを追加するなど、使用率などに合わせて自動的に拡張すること。突発的なアクセス集中に自動的にサーバーを増減して対応できる。`},
{target:`パブサブ（Pub/Sub）`, content:`パブリッシュとサブスクライブの略で「出版-購読型」ち訳される構成。非同期にメッセージをやり取りすることで、結合度が低いためスケーラビリティに優れる。`},
{target:`ロードシェア`, content:`同じ機器を複数用意して処理を静的に振り分け、負荷を分散する手法。`},
{target:`ロードバランサ`, content:`同じ機器を複数用意して処理を動的に振り分け、負荷を分散する手法。`},
{target:`ハイパーバイザー`, content:`仮想化環境を構築するための制御ソフトウェア。物理的なコンピュータの中に、仮想的なコンピュータを作って実行するためのソフトウェア。OS上で仮想マシンを動かすホスト型仮想化ではなく、OSを必要とせずにハードウェア上で直接動作するため、ホスト型仮想化よりも性能の劣化が少ない。仮想的なコンピュータを構築し、管理制御するソフトウェアを指すことが多い。`},
{target:`完全仮想化`, content:`現実のハードウェアとのやり取りをソフトウェアで実現することで、一般的なOSを何も変更することなく実行させる技術。処理速度は少し低下する。`},
{target:`準仮想化`, content:`仮想環境で高速に動作させるために、一般のOSの一部を修正してインストールする技術。性能は高いが、ソースコードが公開されていないOSは実行できない。`},
{target:`P2V（Physical to Virtual）`, content:`物理サーバーで稼働しているシステムを仮想サーバーに移行すること。専用のツールで自動的に変換できるため、再インストールや環境設定は不要なことが多い。`},
{target:`シンプロビジョニング`, content:`ストレージを仮想化して大容量を扱えるようにする。実際のストレージ容量に関わらず、見た目上の容量を仮想的に増やし、利用効率を高めること。仮想化により、求められる容量を満たしながら、最小限のストレージを準備するだけで済む。`},
{target:`キャパシティ・プランニング`, content:`対象のシステムに求められる需要を考えた時に必要な性能やディスク容量などを見積もって、最適な構成を考えること。最大の能力を指すことが多い。`},
{target:`デデェプリケーション`, content:`重複排除とも呼ばれ、重複データを除外してストレージの空き容量を増やす機能のこと。`},
{target:`オーバーコミット`, content:`物理的に利用可能な容量を超えたリソースをゲストの仮想マシンに割り当てること。CPUやメモリ、ストレージなどを割り当てる機能を指す。`},
{target:`リファクタリング`, content:`外部から見た動作を変えずに内部構造を洗練。ソフトウェアの開発において、外部から見た時の動作を変えずに、プログラムの内部構造を変更し、保守性や効率性を高めること。`},
{target:`KISSの法則（Keep It Simple, stupid）`, content:`シンプルな状態を保つことを意味する言葉。複雑になればなるほど不具合などが埋め込まれる可能性が高まり保守も難しくなることを指す。`},
{target:`YAGNI原則（You Ain't Gonna Need It）`, content:`開発時点で必要のないものは実装しないこと。あると便利な機能でも、実際に使われないと意味が無いことから、必要になってから開発することを示す格言。`},
{target:`DRY原則（Don't Repeat Yourself）`, content:`同じ処理をするプログラムを複数の場所に書くのではなく、1箇所にまとめておくべきだという考え方。変更が発生した場合に、1箇所だけ修正すればよくなる。`},
{target:`ガーベジコレクション`, content:`不要になったメモリ領域を解放する機能。プログラム実行中に使われなくなったメモリ領域を開放する機能のこと。不要なメモリ領域を自動的に開放する機能を多くのプログラミング言語が備えている。`},
{target:`メモリコンパクション`, content:`メモリの確保と開放が繰り返された結果、メモリの空き領域に断片化が発生した時に、空き領域を再配置する機能。`},
{target:`アジャイル`, content:`要件定義からリリースまでを短期間に繰り返す手法。`},
{target:`ウォーターフォール`, content:`要件定義から設計、実装、テスト、リリースという流れで開発する手法。`},
{target:`ユーザーストーリー`, content:`顧客や利用者の目線でソフトウェアの要件を簡潔に記述したもの。利用者が得られる価値を書くことで、顧客目線での方向性を表す。`},
{target:`プランニングポーカー`, content:`開発工数の見積もりを行う時にトランプのカードのようなモノを使い、チームのメンバーがそれぞれ考える相対的な工数を出して、妥当な工数を決める手法。`},
{target:`スクラム`, content:`優先順位が高いものから動くソフトウェアを作る。アジャイル開発で使われる手法の1つで、ソフトウェアの開発をスプリントと呼ばれる短期間で区切り、その期間内で設計や実装、テストなどを繰り返す。`},
{target:`デイリースクラム`, content:`朝会と呼ばれることも多い、毎日実施されるイベントで、前日にやったことや当日にやること、現在抱えている問題点などについて報告し、再計画する。`},
{target:`プロダクトバックログ`, content:`機能や要求、要望、修正などそのソフトウェアの開発に必要なものを抽出したリストのこと。順番は実現した時の価値などで並べ、定期的に見直される。`},
{target:`スクラムマスター`, content:`スクラムの進行役で、チーム全体として協力して開発ができているが管理し、プロダクトオーナーと連携してプロジェクトを円滑に進める役割を果たす。`},
{target:`スパイラル`, content:`設計とプロトタイプの作成を繰り返す開発手法。試作品を確認することで依頼者もイメージを確認しながら開発を進められる。フィードバックを反映するため、顧客のニーズを反映した高品質なものの開発につながる。ただし、依頼者の要望が多くなると、試作品ばかりを作ることになり、期間内に完成しない可能性もある。`},
{target:`プロトタイピング`, content:`いきなり完成品を作るのではなく、最低限の試作品を作って、利用者の要求や評価を反映しながら開発を進めること。`},
{target:`インクリメンタルモデル`, content:`求められる機能を小さな単位に分割し、それぞれについて重要な部分から優先して完成させ、残りを追加機能として順次リリースしていく開発モデル。`},
{target:`イテレーティブモデル`, content:`ソフトウェアの全体について最初は広く浅く作って、少しずつ肉付けしていく手法。全体像を最初からイメージでき、変化を感じながら完成度が高まる。`},
{target:`イテレーションとスプリント`, content:`アジャイル開発での開発サイクル。いずれも設計、開発、テスト、改善というサイクルを短期間（1週間から1カ月程度の間）に繰り返すこと。仕様変更などが発生しても速やかに対応できるだけでなく、目の前にある目標に対して全員が高い緊張感を持って対応できるメリットがある。イテレーションは主にXPで、スプリントは主にスクラムで使われる。`},
{target:`XP（Extreme Programming）`, content:`変更の発生は当然だと考えて、変更に積極的に対応する開発手法。ソースコードを重視し、ペアプログラミングやコードレビューでコードを継続的にレビューする。`},
{target:`スプリント計画`, content:`プロダクトアックログの上位から今回のスプリントでの項目を選び、そのスプリントでの目標、作業の実行計画を立てること。ちーむとして作業量を調整する。`},
{target:`スプリントレビュー`, content:`スプリント終了時に成果を確認する場。プロダクトバックログの項目の追加や削除、順番の入れ替えなどにより、プロジェクトの価値を最大化できるように修正する。`},
{target:`リーンスタートアップ`, content:`無駄なく意思決定するために仮説検証を繰り返す手法。仮説検証を繰り返しながら進める開発手法。最小限のコストで開発して速やかにリリースし、顧客の反応を見て改善を繰り返すことで、需要に合わない製品やサービスが作られてしまうことを防ぐ。また、早く市場に出すことで、市場における認知度を高められるメリットがある。`},
{target:`MVP（Minimum Viable Product）`, content:`実用最小限の製品。サービスや製品についてアイデアや仮説を本当に欲しがる人がいるかを検証するため、最低限の機能だけを備えた製品を作ること。`},
{target:`FDD（Feature Driven Development）`, content:`ユーザー機能駆動開発。顧客や利用者にとっての機能価値を重視する開発手法。ビジネス目線で必要な機能を洗い出し、反復的に開発を繰り返す。`},
{target:`RUP（Rational United Process）`, content:`組織やプロジェクトごとにカスタマイズして使うことを前提にした開発手法。ユースケースと呼ばれるシステムの振る舞いを中心に考え、反復型で開発を進める。`},
{target:`ビルド（ビルドツール）`, content:`ソースコードから実行ファイルを生成。C言語やJavaなどのコンパイラ型の言語で、ソースコードを作成した後に行うコンパイルやリンクといった作業のこと。複数のソースコードのコンパイルが必要な場合、ビルドツールを使うことで、複雑な手順を自働化できる。変更していないソースコードはコンパイル作業を実施しないことで、コンパイル時間を短縮できる。`},
{target:`make`, content:`自動的に実行する処理を記述したMakefileというファイルを作成することで、複雑な手順でもmakeというコマンドだけで実行できるツール。`},
{target:`Ant`, content:`Javaの開発でよく使われるビルドツール。多くのJava開発ツールで標準的に使われるが、最近では後継のMavenやGradleも多く使われる。`},
{target:`Bazel`, content:`Googleが開発したビルドツールで、さまざまな言語や環境に向けたルールがあらかじめ用意されている。並列処理に優れ、ビルド時間を短縮できる。`},
{target:`デプロイ`, content:`配置するとの意味で、開発したソフトウェアを利用者が使える状態にすること。Webアプリの場合は、Webサーバーに配置し、設定することで使える状態になる。テスト用の環境に配置することも指す。利用者に公開し、実際に使ってもらうことはリリースという。`},
{target:`プロビジョニング`, content:`ネットワークやサーバーに必要なソフトウェアを導入したり、適切に設定したりして使える状態にすること。需要に合わせて準備しておくことも含まれる。`},
{target:`スナップショット`, content:`ある時点でのファイルやデータベースなどの状態を丸ごと保存したもの。簡単に複製でき、他の環境に移しても、まったく同じ状況を再現できる。`},
{target:`テスト駆動開発（TDD）（Test-Driven Development）`, content:`テストコードを事前に用意して開発を進める手法。実現したい仕様をテストコードとして記述しておくことで、実装したコードがテストを満たしているかチェックしながら開発を進め、不具合を作りこむことを防ぐ。テストコードが成功しているか失敗しているか判断する作業を自働化するために、単体テストツールがよく使われる。`},
{target:`ペアプログラミング`, content:`2人以上のプログラマが1つのコンピュータを使って共同でプログラムを作成する方法。同時に作業をすることで他者の意見を取入れ、質を高める効果がある。`},
{target:`WBS（Work Breakdown Structure）`, content:`タスクを細分化して木構造に整形。多くなプロジェクトを小さな単位（タスク）に分割し、実施すべき作業を明確にしたもの。大・中・小のように分けた木構造で表現することが多い。工数や担当者、納期などを一覧にでき、抜けや漏れを防ぐことにもつながる。プロジェクトの進行状況を管理するため、ガントチャートと合わせて使用することも多い。`},
{target:`EVM（Earned value management）`, content:`WBSのような時間ではなく、コストをグラフにして表現する手法。計画に対する実績値とのズレを調べることで、完成までのスケジュールの予測にも使われる。`},
{target:`ガントチャート`, content:`タスクの開始・終了時期や工数、担当者などを割り振って時系列に並べて表現する図。作業の計画を棒グラフのように表現する方法が使われる。`},
{target:`マインドマップ`, content:`頭の中で考えていることを少しずつ広げながら表現することで、思考を整理したり新たな発想を出したりする手法。WBSを作成する時に役立つことが多い。`},
{target:`UML（Unified Modeling Language）`, content:`オブジェクト指向分析・設計のための記法。オブジェクト指向での設計や開発において、統一した書式で表現するためのモデリング言語。文章で書くのではなくわかりやすい図で表現することで、発注者と開発者、または開発者同士での認識の相違が発生することを防ぐ。プログラミング言語に関係なく使えるため、記法の意味を覚えればプログラミングについての知識が無くても読み取れる。`},
{target:`フローチャート`, content:`処理の流れを表現する図で、JISで定められた標準規格。プログラムの処理を表現するだけでなく、業務フローの記述にも使われる。`},
{target:`ER図（Entity Relationship Diagram）`, content:`データベースの設計において、テーブル間の関係などを表現する図。1対1、1対n、n対nなどの多重度を直感的に表現でき、頭の中を整理できる。`},
{target:`DFD（Data Flow Diagram）`, content:`情報システム全体として、データがどのように流れていくかを表現する図。データの流れと処理を把握することで、システムの機能を洗い出すために使われる。`},
{target:`ドメイン駆動設計（DDD）（Domain-Driven Design）`, content:`顧客と開発者が共通の言葉を使って設計する手法。発注者と開発者が共通の言葉でソフトウェアのシステムを設計し、モデル化したものをそのままコードとして実装するような設計手法のこと。システムの内容を理解できない発注者と業務知識が無く顧客のビジネスを知らない開発者の間でも共通の理解が得られるだけでなく、機能の実現が容易になり開発速度の向上も期待できる。`},
{target:`値オブジェクト`, content:`文字列型や整数型といった標準的な型を使用せず、商品名クラスや金額クラスを作ることで言葉とソースコードを一致させたもの。`},
{target:`SOLID原則`, content:`単一責任の原則、解放閉鎖の原則、リスコフの置換原則、インターフェイス分離の法則、依存性逆転の原則の略で、わかりやすいソースコードを書くガイドライン。`},
{target:`単一責任の原則`, content:`クラスは単一の機能に対する責任を持ち、その機能に関する変更理由が1つだけになるように設計することで、コードの保守性と理解しやすさを高める。`},
{target:`開放閉鎖の原則`, content:`ソフトウェアは既存のコードを修正せずに、新しい機能を追加できるように設計する。これにより、システムの安定性を保ちながら、柔軟に機能を拡張できる。`},
{target:`リスコフの置換原則`, content:`子クラスは親クラスと互換性を持ち、親クラスの代わりに子クラスを使っても、プログラムの正しい動作を保証する。これにより、コードの再利用性と拡張性が向上する。`},
{target:`インターフェイス分離の法則`, content:`クライアントが使用しないメソッドを持つ大きなインターフェイスを避け、特定の機能に絞った小さなインターフェイスを設計する。これにより、システムの柔軟性と保守性が向上する。`},
{target:`依存性逆転の原則`, content:`高レベルモジュールが低レベルモジュールに依存するのではなく、両者が共通の抽象（インターフェイス）に依存するように設計することで、システムの柔軟性とテスト容易性を向上させる。`},
{target:`RDRA（Relationship Driven Requirement Analysis）`, content:`要件定義で使われる手法。システム化の対象範囲を決めるために、システムを取り巻く外部環境や接点に注目し、要求される機能やデータと関連付けることが特徴。`},
{target:`クリーンアーキテクチャ`, content:`部品の依存を一方向にするソフトウェアの設計手法。仕様変更などが発生した時に影響範囲を最小限に抑えることを目的にするソフトウェアの設計手法の1つ。ソフトウェアを開発する時に、その構成する部品をレイヤーとして考え分離し、その依存関係を一方向にして管理する手法で、同心円状の図がよく使われる。インターフェイスを統一することで疎結合にでき、テストも実施しやすくなる。`},
{target:`依存性の注入`, content:`あるクラスが別のクラスに依存していると変更が自発生した場合に双方の修正が必要なため、関連付けを設定ファイルで行い、プログラム内での依存関係を排除すること。`},
{target:`レイヤードアーキテクチャ`, content:`ソフトウェアの開発において、各モジュールを責務によって分割し依存関係を少なくする手法。`},
{target:`オニオンアーキテクチャ`, content:`ソフトウェア設計のパターンの一つで、依存関係を整理しやすくする。中心にドメイン（ビジネスロジック）があり、外側に向かってインフラストラクチャやユーザインターフェースなどの層が広がる。各層は内側の層に依存し、逆はない。これにより、システムの柔軟性とテストの容易さが向上する。`},
{target:`インピーダンスミスマッチ`, content:`データ構造やプログラミングパラダイム間のズレのこと。プログラムがオブジェクト指向で保持しているデータを、データベースでうまく表現できない状況などを指す。`},
{target:`CI/CD（Continuous Integration/Continuous Delivery）`, content:`ソフトウェアの開発プロセスを自働化。継続的インテグレーションは、ソースコードをコミットするとビルドやテストが自動的に実行され、失敗した時に即時フィードバックされる方法。不具合を作りこんだ時に問題が発覚するまでの時間を短縮でき、原因の調査が容易になる。また、継続的デリバリーは、ソフトウェアをいつでもリリースできる状態にしておくこと。`},
{target:`ブルーグリーンデプロイ`, content:`継続的デリバリーから派生したデプロイの方法で、本番環境（ブルー）を新しい環境（グリーン）に即時切り替えることでサーバーのダウンタイムをゼロにすること。`},
{target:`カナリアリリース`, content:`新しいバージョンのソフトウェアをリリースする時、これまでのバージョンも並行して稼働し、一部の利用者だけ新しいバージョンを使用させて検証すること。`},
{target:`RFP（Request For Proposal）`, content:`提案依頼書。ソフトウェアで実現する範囲を文書で決定。顧客がシステム化にあたって求める要望や、課題に感じていることを整理した文書。この内容に従って、費用面なども考慮したうえで、実現する範囲を顧客と調整して決定する。実現する品質や範囲を決めておかないと、要望が後から追加されて開発が終わらなくなるため、ソフトウェア開発において重要な文書である。`},
{target:`要求分析（要求定義）`, content:`機能要件や非機能要件を含めて、どのようなことを実現したいか、実現できなければ困ることは何か、という顧客側の視点で要求を整理すること。`},
{target:`要件定義`, content:`実現する機能や性能といった品質や、開発する範囲などを含め、システムが何をしなければいけないか、何が必要かを開発側の視点でまとめること。`},
{target:`RFI（Request For Information）`, content:`情報依頼書。業務委託や入札を行う時に相手を比較するため、その会社の会社情報や実績、製品のカタログなどの情報提供を依頼する書類のこと。`},
{target:`IaC（Infrastructure as Code）`, content:`インフラの構成をコードで記述。サーバーやネットワークといったインフラを自動的に設定するために、ソースコードや設定ファイルによって記述する方法。`},
{target:`Ansible`, content:`Pythonで作られたインフラ構築の自動化ツール。対象のサーバーにエージェントなどをインストールすることなくソフトウェアのインストールや設定が可能。`},
{target:`Chef`, content:`Rubyなどで作られたサーバー設定ツール。対象のサーバーにエージェントを導入し、管理サーバーから設定情報を取得して、インストールや設定を行う。`},
{target:`冪等性（べきとうせい）`, content:`同じ操作を何度も繰り返しても、同じ結果が得られること。誤って再実行してもファイルが二重に作られたりすることなく、誰がやっても同じ設定を再現できる。`},
{target:`FPGA（Field Programmable Gate Array）`, content:`現場でプログラミング可能な集積回路。自由に書き換えられる集積回路。内部の構成を購入後に自由に変更できる集積回路のこと。専用の処理を書き込む小尾tで、その処理については高速に処理できる。`},
{target:`HDL（Harware Description Language）`, content:`FPGAなどの設計で使われるハードウェア記述言語で、プログラミング言語のように数式や条件分岐などを書ける。`},
{target:`3D-MID（3-Dimentional Modeled Interconnect Device）`, content:`3次元成形回路部品。2次元の配線よりも部品点数を削減でき、軽量化や低コスト化につながる。`},
{target:`アーキテクチャ`, content:`ハードウェアやソフトウェアの設計思想。`},
{target:`x86`, content:`Intel社のCPUのアーキテクチャで、8086、80286といった製品シリーズ名。このCPUの命令セットと互換性があれば、他社の製品を含むこともある。32ビットのCPU命令セット。`},
{target:`x64`, content:`64ビットのCPU命令セットのアーキテクチャを指す。現在の主流。`},
{target:`プログラミングパラダイム`, content:`プログラミング言語が設計された考え方のこと。手軽に作りたい、処理速度を追求したい、大規模なプログラムでも保守しやすい、など様々な考え方がある。`},
{target:`デザインパターン`, content:`ソフトウェアの設計ノウハウ集。開発者がよく出会う問題とそれに対する良い設計を整理したもの。再利用しやすい設計を効率よく再現できる。有名なものにGoFのデザインパターンがある。`},
{target:`コーディング規約`, content:`プログラムの保守性と品質を高めるために決められている、プロジェクト内でのソースコードの記述ルールのこと。`},
{target:`GoF（Gang of Four）`, content:`4人の開発者によって定められた23種類のデザインパターンのこと。オブジェクト指向開発でよく使われている。`},
{target:`アンチパターン`, content:`ソフトウェアの開発でよくある失敗や、避けるべき事例のこと。読み解くのが大変なスパゲティと呼ばれるソースコードや、長い処理を詰め込んだ関数などを指す。`},
{target:`フレームワーク`, content:`多くのソフトウェアで使われる土台。ソフトウェアの開発やデザインなどで使われる、多くのソフトウェアで使われるような一般的な土台として用意したもの。開発者はその土台の上で個別の機能を実装するだけでよいため、開発効率の向上が期待できる。一方で、同じフレームワークを使っているものは外観や動作が似ており、開発者はオリジナリティを発揮しにくい。`},
{target:`scaffold`, content:`フレームワークが用意している機能で、多くのアプリケーションで使われる処理のひな型となるソースコードを自動的に生成でき、開発にかかる時間の短縮につながる。`},
{target:`SDK（Software Development Kit）`, content:`ライブラリだけでなく、サンプルコードやドキュメントなどをひとまとめにして提供しているもの。プログラミング言語やOSの開発元が提供している。`},
{target:`スレッドとプロセス`, content:`ソフトウェアがCPUを利用する単位。`},
{target:`CPUコア`, content:`1つのCPUの中で実際に処理する部分のことを指し、最近では複数のコアを搭載しているCPUが多い。コアの数だけ、同時に複数の処理を実行できる。`},
{target:`マルチスレッド`, content:`プロセスの中で複数のスレッドを並行して実行すること。長時間の処理を実行するとき、メインのスレッドとは別のスレッドを使うことで、応答性が向上する。`},
{target:`ミューテックス`, content:`複数のスレッドやプロセスの間で排他制御や同期を実装する時に使われる技術。複数のプロセスが同時に起動することを防ぐために使われることもある。`},
{target:`イミュータブル`, content:`後で状態を変えられないもの。不変性。プログラムの場合、変数に代入したオブジェクトの中身を変更できないものを意味する。`},
{target:`イミュータブル・インフラストラクチャー`, content:`サーバーを構築した後、バージョンアップや更新プログラムを適用しない手法。新たな環境を構築しておき、切替えて使う。`},
{target:`副作用`, content:`想定される処理が行われるだけでなく、他に影響が出ること。例えば、関数やメソッドを実行した時に、状態を管理する変数やオブジェクトの内容が変わること。`},
{target:`参照透過性`, content:`同じ入力を与えたら、必ず同じ結果が得られること。関数の他の変数などによって結果が変わらないため、テストが容易になるなどのメリットがある。`},
{target:`オープンソース（OSS）（Open Source Software）`, content:`ソースコードが無料で公開されているソフトウェア。利用や改変、再配布が自由に許可されているソフトウェアのこと。世界中の開発者が不具合の修正や機能追加に参加できるため、貢献する人が増えると機能や品質が高まる。さらに無料で利用できることから利用者が増えることで、より使いやすいソフトウェアになることが多い。`},
{target:`ライセンス`, content:`OSSの利用や改変、再配布など、従う必要がある規約。代表的なものにGPL（GNU General PublicLicense）やBSD License、MIT Licenseなどがある。`},
{target:`コピーレフト`, content:`著作者が著作権を保持したままで、著作物の配布条件が変更されない限り、複写や改変、再配布といった権利を利用者に与える考え方のこと。`},
{target:`プロプライエタリ`, content:`オープンソースと反対の意味で、ソースコードやプログラムの所有権を主張して利用者の権利を制限すること。ソースコードは公開せず、バイナリのみ配布される。`},
{target:`DevOps`, content:`開発から保守まで一貫して対応。開発者と運用担当者が密に連携することで、柔軟かつスピーディーにシステムを開発することや組織としての文化のこと。顧客のニーズに速やかに対応するだけでなく、エンジニアも幅広いスキルを身に着けることができる。`},
{target:`QA（Qualitiy Assurance）`, content:`品質保証。システム開発などにおいて、レビューやテストなどによって、その性能や機能の品質を保証すること。`},
{target:`ITIL（Information Technology Infrastructure Library）`, content:`ITサービスマネジメントにおける成功事例を集めたもので、より良いITシステムの開発や運用のテンプレートとして使える。`},
{target:`SRE（Site Reliability Engineering）`, content:`信頼性を高めるため自働化などにも取り組むインフラ担当者。サイト信頼性エンジニア。システムの運用を支え、システム全体の信頼性を向上させるエンジニアのこと。インシデント管理や厚生管理などのシステム管理にツールを導入して自働化するなど、企業が抱える多くのサーバーやネットワーク機器などのシステムを効率よく管理できるようにする。開発部門とインフラ部門との橋渡しの役割も果たす。`},
{target:`CRE（Customer Reliability Engineer）`, content:`顧客の信頼性を高めるエンジニアのこと。顧客からの問い合わせについての原因の調査や、カスタマーサポート担当者が使うシステムの開発などを行うことが多い。`},
{target:`トイル（Toil）`, content:`自働化しようとしても、どうしても最後まで手作業が残ってしまう部分のこと。何度も実行する作業であり、ゼロにするのは難しいが、可能な限り減らすことが重要。`},
{target:`エラーバジェット`, content:`問題が発生しても許容できる数のこと。ミスやエラーをゼロにすることを目指すと新しいことに挑戦しなくなるため、許容できる範囲を決め、その範囲内で挑戦する。`},
{target:`SoE（System of Engagement）`, content:`システム設計の方向性。主に社外向けで利用者の目線で開発された、利用者が中心の情報系システムで、利用者に活用されることが重要である。`},
{target:`SoR（System of Record）`, content:`システム設計の方向性。社内向けで情報の蓄積などを目的とした、データの記録が中心の基幹系システムで、正確に記録できることが重要である。`},
{target:`システムインテグレーター`, content:`企業が使うシステムの全体を考慮し、設計から開発、運用を担当する企業のこと。Sler（エスアイヤー）と呼ばれる。システムの安定稼働が求められる。`},
{target:`Sol（System of insight/Inteligence）`, content:`ビックデータやAIなどを活用し、データ分析の基盤となる部分のこと。分析して得られた結果でSoEやSoRを支援する役割が期待されている。`},
{target:`クラスタ`, content:`多くのコンピュータの集まり。多数のコンピュータで分散して並列処理を行うことで、スーパーコンピュータのような性能を安価に実現できる。CPUやメモリ、通信速度などのバランスを考えるだけでなく、並列計算を意識したプログラムを作ることが求められる。`},
{target:`HPC（highPerformance Computing）`, content:`高性能計算。大規模で高性能なコンピュータを使って、シミュレーションなどの膨大な量の計算を必要とする処理を行うこと。`},
{target:`GPUクラスタ`, content:`最新のGPUを搭載したコンピュータでクラスタを作成し、注目を集めている機械学習などで非常に高速な計算ができる構成のこと。`},
{target:`グリッドコンピューティング`, content:`インターネットなどにあるコンピュータを結び付け、1つのコンピュータとしてサービスを提供する仕組み。空いているリソースの有効活用につながる。`},
{target:`マイグレーション`, content:`異なる環境への移行。プログラムやデータなどを新しい環境に移行すること。`},
{target:`リプレース`, content:`これまで使っていたシステムを新しい環境や同等の機能を持った別のシステムに入れ替えること。`},
{target:`レガシーマイグレーション`, content:`メインフレームなど時代遅れになったシステムを最近の環境に移行すること。COBOLなどのプログラミング言語で書かれたシステムを移行することが多い。`},
{target:`ライブマイグレーション`, content:`あるコンピュータ上で動作している仮想マシンを、実行したまま他のコンピュータに移すこと。ハードウェアの保守や新機種への更改でも処理を辞めずに移行できる。`},
{target:`クロスプラットフォーム`, content:`異なる環境でも動かせるように開発。異なるハードウェアやOSでも同じプログラムをそのまま実行できること。また、同じソースコードからそれぞれのOSなどに合わせた実行ファイルを生成できるようなツールや開発手法を指すこともある。`},
{target:`バイトコード`, content:`実行環境のOSやCPUに関係なく作成された中間コードのこと。環境に合わせて作成する必要が無く、実行時には機械語に変換しながら実行される。`},
{target:`JIT方式（Just In Time）`, content:`スクリプト言語で作成されたWebアプリなど、何度も実行される場合に備えて1回目に内部でコンパイル処理を行う方式。2回目以降は高速に実行できる。`},
{target:`ハッカソン`, content:`開発に没頭するイベント。プログラマやデザイナーなどが集まってチームを作り、短期間で集中的にソフトウェアを開発するイベント。ハック（hack）とマラソン（marathon）を合わせた造語で、決められた期間内に開発してその成果を競う。異なる職種が集まることで新しいアイデアが生まれ、ゼロから開発することで新しい技術を学ぶこともできる。`},
{target:`マッシュアップ`, content:`複数のサービスや情報を組み合わせて加工し、新たなサービスとして提供すること。欲しい情報を何度も検索しなくても、1度で情報が得られるメリットがある。`},
{target:`メイカーズムーブメント`, content:`3Dプリンタなどの機会の登場で、手軽にモノづくりができることから広がっている、デジタル技術を使ったモノづくりのこと。第3の産業革命とも言われる。`},
{target:`静的解析`, content:`プログラムを実行せずにチェックする手法。ソースコードに含まれる誤りを診断する作業。人間が目視でチェックすることをコードインスペクションという。プログラムを実行することなく様々な問題を発見するため、テストより前の段階で検証できる。誤りを早い段階で見つけることから手戻りを防いで影響を最小限に抑えるために行われる。`},
{target:`リバースエンジニアリング`, content:`ソースコードが非公開のソフトウェアなどの実行ファイルを解析して、技術情報を調べること。マルウェアの動作の解析などセキュリティ面で使われることもある。`},
{target:`メトリクス`, content:`ソースコードの規模や複雑さ、保守性などを定量的に数値で示す指標のこと。複雑さの指標として、凝集度や結合度、サイクロマティック複雑度などがある。`},
{target:`ウォークスルー`, content:`印刷したソースコードを手作業で点検すること。欠陥を見つけるために成果物をチェックする意味で使われることが多い。`},
{target:`カバレッジ`, content:`テストの網羅率を測定する時の指標。網羅性の尺度として使われる値で、ソフトウェアのテストにおいては品質を高めるための努力目標として使われる。すべての命令を実行したかを調べるC0（命令網羅）、すべての分岐を実行したかを調べるC1（分岐網羅）、すべての組合せを少なくとも1回実行したかを調べるC2（条件網羅）がある。`},
{target:`ホワイトボックステスト`, content:`ソースコードの中身を見て、各処理に使われている命令や分岐、条件などを網羅しているか調べる方法で、仕様書に書かれている通りに動作しているかを確認する。`},
{target:`ブラックオックステスト`, content:`ソースコードを見ずにプログラムの入出力だけに注目し、動作が仕様通りかどうかを判定する方法で、定められたテストケースで正しい結果が得られるか確認する。`},
{target:`BTS（Bug Tracking System）`, content:`プロジェクトで検出したバグを登録し、修正状況を管理するシステムのこと。担当者や対応状況、履歴を把握し、情報を共有するために使われる。`},
{target:`SQL（Structured Query Language）`, content:`関係データベース管理システム（RDBMS）でデータを操作・管理するための標準的な言語。データベース内のデータの作成、読み取り、更新、および削除（CRUD操作）が簡単に行える。特定のスキーマを持つテーブル形式でデータを扱うことを前提とし、複雑なクエリを実行してデータを抽出・集計・分析することが可能。広範な業界で使用され、特にデータ整合性と一貫性が求められるアプリケーションで重宝されている。`},
{target:`NoSQL（No Structured Query Language）`, content:`開発データベース以外のデータベース。関係データベースでの課題を解決するために作られたデータベースのこと。表形式の構造にこだわらず、様々な形式のデータをそのまま保存できる。複数のサーバーでデータを分散して保存できるなど拡張性が高く、多数のアクセスが集中した場合でも性能を上げやすい特徴がある。データ分析などの用途で多く使われている。`},
{target:`非構造化データ`, content:`住所録での郵便番号、住所、電話番号のような、項目の内容によって入れる場所が決まっているのではなく、ブログの記事や画像、動画のように自由な形式のこと。`},
{target:`キーバリュー型`, content:`キーと呼ばれる索引に対する値をキーとペアで格納するシンプルなデータ構造のこと。キーの値で検索することで、対応する値を高速に見つけられる。`},
{target:`列指向型（カラム指向型）`, content:`通常の関係データベースが行単位でデータを扱うのに対し、列単位でデータを扱う手法。同じ列に似た様な値が入ることが多い場合の集計処理などが得意。`},
{target:`ストアドプロシージャ`, content:`データベース内に格納される定型処理。データベースの中に格納されている関数で、データベース内で条件分岐やループなどの制御も含めた複数の処理をまとめて実行する役割を担う。事前にコンパイルしておくことで高速に処理でき、呼び出し側のプログラムもシンプルになる。呼び出し側のプログラムへの戻り値がある場合はストアドファンクションと呼ぶこともある。`},
{target:`PL/SQL`, content:`Oracle社が開発したSQLの拡張言語で、Oracle Databaseでのストアドプロシージャの作成に使われる。DB2やMariaDBなどでも使えるようになってきている。`},
{target:`Transact-SQL（T-SQL）`, content:`SQLを拡張した言語で、Microsoft SQL Serverなどでストアアドプロシージャの作成に使われるが、多くのDBMSとの互換性はない。`},
{target:`O/Rマッピング（Object/Relational）`, content:`オブジェクト指向言語で作成したプログラムの内部で保持しているデータをリレーショナルデータベースに保存する時に、自動的に対応付けてくれる手法のこと。`},
{target:`マテリアライズドビュー`, content:`データベースの参照性能を向上するための手法。抽出したデータを元のテーブルから複製しておくことで、検索する時には元のテーブルを参照する必要が無く、応答速度を向上させる仕組み。元のテーブルから更新が反映されるまでには少し時間がかかるため、最新の内容とは限らないが、更新が少なく参照が多いテーブルでは高速に動作するメリットがある。`},
{target:`データウェアハウス`, content:`データの貯蔵庫とも呼ばれ、データの分析や検索に特化している。システムを横断して、目的に合わせて必要なデータを統合して扱えることが特徴。`},
{target:`データレイク`, content:`構造化データだけでなく、非構造化データも格納できる場所のこと。機械学習などのデータ分析に使用され、大量のデータを低コストで保存するために使われる。`},
{target:`ETL（Extract, Transform, Load）`, content:`抽出、変換、格納の頭文字で、さまざまデータベースやシステムからデータを抽出し、扱いやすいフォーマットに変換して、統合して格納する処理のこと。`},
{target:`バージョン管理システム`, content:`ファイルの変更箇所を管理するソフトウェア。ファイルを変更した時の差分や履歴を管理するソフトウェア。いつ誰がどこをどのように修正したのか？最新のバージョンはどれか？などを管理することで、前のバージョンに戻す、変更内容を確認する、開発環境から本番環境にソースコードの差分だけを反映する、などさまざまな使い方ができる。`},
{target:`Git`, content:`利用者の手元のリポジトリにすべての履歴が保存される分散型のバージョン管理システムで、中央のリポジトリにアクセスできない環境でも変更の記録などが可能。`},
{target:`Subversion`, content:`履歴を一箇所のサーバーで管理する集中型のバージョン管理システムで、コミットするたびに新しい番号が付与されるため、バージョンを直感的に管理できる。`},
{target:`先祖返り`, content:`プログラムや文書などを修正した時に、何らかの原因で古いバージョンを修正してしまい、過去に修正したはずの問題点が再び発生する状態。`},
{target:`★Web制作・運用で使われるIT用語`, content:`ーーーーー`},
{target:`AMP`, content:`スマホでの表示を高速化する手法。`},
{target:`OGP`, content:`WebサイトをSNSでシェアした時の表示の工夫。`},
{target:`SPA`, content:`単一のWebページでコンテンツを切り替える仕組み。`},
{target:`静的サイトジェネレータ（SSG）`, content:`MarkdownからWebサイトを生成するソフトウェア。`},
{target:`SSRとCSR`, content:`JavaScriptのコートをレンダリングする場所の違い。`},
{target:`サードパーティCookie`, content:`異なるドメインで使われるCookie。`},
{target:`ブラックハットSEO`, content:`悪質な手法で検索結果を変える。`},
{target:`レスポンシブデザイン`, content:`異なるサイズの画面でも見やすく配置するデザイン。`},
{target:`カルーセル`, content:`ページ内の要素を左右に移動して切り替える手法。`},
{target:`CSSフレームワーク`, content:`典型的なWebデザインの土台。`},
{target:`WebAssembly（WASM）`, content:`Webブラウザ上で高速に実行するプログラミング言語。`},
{target:`WebSocket`, content:`Webで双方向通信を実現する仕組み。`},
{target:`WebRTC`, content:`Webでリアルタイムな通信を実現する仕組み。`},
{target:`WebGL`, content:`Webブラウザで3Dを表示する仕組み。`},
{target:`SVG`, content:`ベクター形式で作成する画像フォーマット。`},
{target:`wepack`, content:`JavaScriptなど複数のファイルをまとめるツール。`},
{target:`WebP`, content:`圧縮率の高い新たな画像保存形式。`},
{target:`RFC`, content:`Web技術に関する仕様の提案や結果についての文書。`},
{target:`リバースプロキシ`, content:`外部から処理を仲介するサーバー機能。`},
{target:`CDN`, content:`多くのコンテンツを効率よく配信する仕組み。`},
{target:`サーバーレス`, content:`サーバーの保守や運用なしに利用する手法。`},
{target:`ヘッドレスCMS`, content:`見た目を自由に作れるWebコンテンツ管理の仕組み。`},
{target:`トランスパイラ`, content:`他のプログラミング言語のソースコードを生成。`},
{target:`JAMstack`, content:`JavaScriptとAPIで動的なWebサイトを実現する手法。`},
{target:`仮想DOM`, content:`ブラウザ内の要素を簡単に操作し高速表示する仕組み。`},
{target:`マテリアルデザイン`, content:`Googleが提唱するデザインの考え方。`},
{target:`PWA`, content:`スマホアプリのように扱えるWebアプリ。`},
{target:`Service Worker`, content:`Webページの裏側で動くスクリプト。`},
{target:`VPS`, content:`レンタルで自由に使える仮想的な専用サーバー。`},
{target:`XaaS（SaaS、PaaS、IaaS）`, content:`クラウドで提供されるサービスの形態。`},
{target:`スクレイピングとクローリング`, content:`Webサイトを巡回して抽出。`},
{target:`REST`, content:`URIを指定してリソースを操作する仕組み。`},
{target:`SOAP`, content:`Webサービス間でのデータ交換プロトコル。`},
{target:`GraphQL`, content:`WebAPI向けのクエリ言語。`},
{target:`OpenAPI（Swagger）`, content:`REST APIを定義するツール。`},
{target:`SAML`, content:`異なるドメインでのID連携の企画。`},
{target:`スクラッチ開発`, content:`ゼロから作る開発手法。`},
{target:`リファラー`, content:`アクセス先に提供されるアクセス元の情報。`},
{target:`★攻撃から守るセキュリティ・ネットワーク用語`, content:`ーーーーー`},
{target:`CIA（機密性、完全性、可用性）`, content:`セキュリティの3要素。`},
{target:`PCI DSS`, content:`クレジットカード情報を扱う時のセキュリティ基準。`},
{target:`SLA`, content:`サービス事業者が示す品質の保証内容。`},
{target:`二段階認証と多要素認証`, content:`パスワードの漏洩による不正ログインを防ぐ方法。`},
{target:`シングルサイオン（SSO）`, content:`1度のログインで複数のサービスを使う。`},
{target:`OAuth`, content:`部分的な情報にだけアクセスを許可する仕組み。`},
{target:`OpenID Connect`, content:`ログインなどの認証処理を外部に任せる仕組み。`},
{target:`FIDOとTPM`, content:`パスワードに代わる認証の規格。`},
{target:`トラッキングとITP`, content:`Web上での人の行動を追跡。`},
{target:`ワンタイムパスワード（OTP）`, content:`一定の時間で変わるパスワード。`},
{target:`WPS`, content:`無線LANを簡単に設定する仕組みや規格。`},
{target:`Wi-Fi 6`, content:`高速・多数同時接続を実現した次世代Wi-Fi。`},
{target:`インシデント`, content:`重大な事故・事件につながりかねない事案。`},
{target:`CSIRTとSOC`, content:`セキュリティに対応する組織。`},
{target:`CVSS`, content:`脆弱性の深刻さの共通基準。`},
{target:`脆弱性診断`, content:`脆弱性の存在を調べる調査。`},
{target:`UTM`, content:`複数のセキュリティ機能をまとめた機器。`},
{target:`SIEM`, content:`セキュリティに関するログを一元管理する仕組み。`},
{target:`SOAR`, content:`セキュリティの運用を自働化するシステム。`},
{target:`レピュテーション`, content:`過去の評判データを使い、悪質なものを排除する手法。`},
{target:`遠隔操作ウイルスとRAT`, content:`パソコンやスマホに感染して外部から操作。`},
{target:`ビジネスメール詐欺（BEC）`, content:`取引先になりすまし、金銭的な被害を与える手法。`},
{target:`EPP`, content:`組織内に侵入したマルウェアを検知するソフトウェア。`},
{target:`サンドボックス`, content:`保護された領域でプログラムを試すソフトウェア。`},
{target:`NGAV`, content:`AIなどを用いてマルウェアを検知するソフトウェア。`},
{target:`EDR`, content:`マルウェアの脅威を検知し、対応を支援するツール。`},
{target:`VPN`, content:`安全なネットワークを仮想的に構築する手法。`},
{target:`VDI`, content:`リモートで使うデスクトップ環境を実現する仕組み。`},
{target:`WAF`, content:`典型的な脆弱性を狙った攻撃を阻止する仕組み。`},
{target:`DLP`, content:`機密情報の外部への流出を阻止する技術。`},
{target:`SQLインジェクション`, content:`データベースを扱うアプリケーションの脆弱性。`},
{target:`XSS`, content:`複数のサイトを横断する攻撃。`},
{target:`CSRF`, content:`他人に成りすました攻撃。`},
{target:`SDNとNFV`, content:`仮想的なネットワークを実現。`},
{target:`DNSSEC`, content:`ネームサーバーからの応答を検証する手法。`},
{target:`MPLS`, content:`ラベルを使って転送先を制御する方法。`},
{target:`BLE`, content:`Bluetoothを使った低消費電力の通信。`},
{target:`PLC`, content:`コンセントにさしてインターネットに接続。`},
{target:`VoIP`, content:`インターネット経由での音声通信。`},
{target:`FQDN`, content:`URLなどでドメイン名を省略しない表記方法。`},
{target:`SSL/TLS`, content:`Webにおけるデータを暗号化する仕組み。`},
{target:`PKI`, content:`公開鍵暗号を使用したセキュリティ基盤。`},
{target:`★人工知能に使われる技術用語`, content:`ーーーーー`},
{target:`クラスタリング`, content:`似たデータを集めてグループ分け。`},
{target:`決定木`, content:`条件を木構造で表現し、分類や回帰を実現する手法。`},
{target:`ランダムフォレスト`, content:`複数の決定木による多数決で精度を高める手法。`},
{target:`サポートベクターマシン`, content:`データを分離する境界からの距離を最大化する手法。`},
{target:`ニューラルネットワーク`, content:`脳を模倣した構造で信号を伝えて計算する手法。`},
{target:`ディープラーニング（DL）`, content:`深い階層を実現したニューラルネットワーク。`},
{target:`機械学習（ML）`, content:`データをもとに気海外ルールを学習する方法。`},
{target:`教師あり学習`, content:`与えられた正解データに近づけるような学習方法。`},
{target:`教師なし学習`, content:`大量のデータから共通点を見つけて分類する学習方法。`},
{target:`強化学習`, content:`良い結果に報酬を与えて徐々に成長させる学習方法。`},
{target:`遺伝的アルゴリズム`, content:`生物の進化を模倣したアルゴリズム。`},
{target:`自己組織化マップ`, content:`近くにあるﾃﾞｰﾀを強く学習する方法。`},
{target:`転移学習`, content:`他の領域での成果を活用する効率的な学習方法。`},
{target:`MNIST`, content:`機械学習に便利な手書き数字のデータの集まり。`},
{target:`Kaggle`, content:`投稿された研究用のデータで分析を競う。`},
{target:`活性化関数`, content:`入力を変換する非線形な関数。`},
{target:`ハイパーパラメータ`, content:`機械学習の処理を調整する特別な値。`},
{target:`ヒューリスティックス`, content:`経験による勘を使って予測する手法。`},
{target:`パラメトリック`, content:`事前に母集団の分布がわかっているときに使える手法。`},
{target:`CNN`, content:`画像認識に役立つニューラルネットワーク。`},
{target:`RNN`, content:`時系列データに役立つ再帰的なニューラルネットワーク。`},
{target:`LSTM`, content:`長期記憶と短期記憶を組み合わせて学習する方法。`},
{target:`GAN（GANs）`, content:`他のAIに偽物だと判断されないものを作り出す方法。`},
{target:`ASICとTPU`, content:`特定の用途に特化した集積回路。`},
{target:`GPGPU`, content:`画像処理以外にもGPUを活用。`},
{target:`DSP`, content:`音声などの解析を高速に実行するマイクロプロセッサ。`},
{target:`マルチエージェント`, content:`複数のエージェントが協調して答えを出す方法。`},
{target:`エッジAI`, content:`現場で動く機器でAIを動かす。`},
{target:`ディープフェイク`, content:`人工知能による偽物生成技術。`},
{target:`スパースモデリング`, content:`諸横領のデータでも特徴の抽出により分析できる手法。`},
{target:`AutoML`, content:`自動的に機械学習のモデルを作成。`},
{target:`自然言語処理`, content:`人間の言葉を機械で処理する技術。`},
{target:`★使いだしたら一人前！　ITギョウカイ用語`, content:`ーーーーー`},
{target:`上げる`, content:`サーバーなどを起動する・アップロードする。`},
{target:`生きている`, content:`動作している状態。`},
{target:`枯れる`, content:`時間が経って問題点が少なくなる。`},
{target:`怒られる`, content:`警告やエラーが表示される。`},
{target:`落ちる`, content:`サーバーなどが停止する。`},
{target:`落とす`, content:`サーバーなどを終了する・ダウンロードする。`},
{target:`固まる`, content:`反応が無くなる。`},
{target:`キックする`, content:`コマンドを実行する。`},
{target:`フォークする`, content:`分岐する。`},
{target:`切る`, content:`領域を分ける、チケットを発行する。`},
{target:`食う`, content:`占有する。`},
{target:`こける`, content:`処理が失敗する。`},
{target:`殺す`, content:`制御できない処理を終了する、無効化する。`},
{target:`死ぬ`, content:`サーバーなどが停止する。`},
{target:`叩く`, content:`コマンドを実行する。`},
{target:`流す`, content:`複数の処理を実行する。`},
{target:`投げる`, content:`データを送信する。`},
{target:`なめる`, content:`一覧を順に処理する。`},
{target:`握り潰す`, content:`エラーを見ないようにする。`},
{target:`吐く`, content:`データを出力する。`},
{target:`走る`, content:`処理が実行される。`},
{target:`張り付く`, content:`使用率が高い状態が続く。`},
{target:`立てる`, content:`サーバーなどを構築する。`},
{target:`技術的には可能です`, content:`膨大なお金と時間がかかる、面倒なのでやりたくない。`},
{target:`完全に理解した`, content:`わかったつもりになっている。`},
]
